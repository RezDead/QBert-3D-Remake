//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Prefabs/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""bea54da6-5a60-43cf-90c8-cc1d54870bc2"",
            ""actions"": [
                {
                    ""name"": ""UpLeft"",
                    ""type"": ""Button"",
                    ""id"": ""0193cb51-9855-44d6-89c1-f0ba99063fcf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpRight"",
                    ""type"": ""Button"",
                    ""id"": ""54df3c62-129b-4439-9fe6-0d7094b2a49a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownLeft"",
                    ""type"": ""Button"",
                    ""id"": ""00261dad-6705-4924-92ca-ac9aeed58ef8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownRight"",
                    ""type"": ""Button"",
                    ""id"": ""04b36073-234f-4210-8683-1ac1b3f14460"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99310f7e-f59c-415e-b33a-a616607220d0"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26baffc5-9315-4232-9588-072cfe4ba48f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3df0048-13e5-4754-981f-d00a9a00015a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b982cec6-6016-49dd-923d-dad6cff9e2c8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_UpLeft = m_PlayerMovement.FindAction("UpLeft", throwIfNotFound: true);
        m_PlayerMovement_UpRight = m_PlayerMovement.FindAction("UpRight", throwIfNotFound: true);
        m_PlayerMovement_DownLeft = m_PlayerMovement.FindAction("DownLeft", throwIfNotFound: true);
        m_PlayerMovement_DownRight = m_PlayerMovement.FindAction("DownRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_UpLeft;
    private readonly InputAction m_PlayerMovement_UpRight;
    private readonly InputAction m_PlayerMovement_DownLeft;
    private readonly InputAction m_PlayerMovement_DownRight;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpLeft => m_Wrapper.m_PlayerMovement_UpLeft;
        public InputAction @UpRight => m_Wrapper.m_PlayerMovement_UpRight;
        public InputAction @DownLeft => m_Wrapper.m_PlayerMovement_DownLeft;
        public InputAction @DownRight => m_Wrapper.m_PlayerMovement_DownRight;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @UpLeft.started += instance.OnUpLeft;
            @UpLeft.performed += instance.OnUpLeft;
            @UpLeft.canceled += instance.OnUpLeft;
            @UpRight.started += instance.OnUpRight;
            @UpRight.performed += instance.OnUpRight;
            @UpRight.canceled += instance.OnUpRight;
            @DownLeft.started += instance.OnDownLeft;
            @DownLeft.performed += instance.OnDownLeft;
            @DownLeft.canceled += instance.OnDownLeft;
            @DownRight.started += instance.OnDownRight;
            @DownRight.performed += instance.OnDownRight;
            @DownRight.canceled += instance.OnDownRight;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @UpLeft.started -= instance.OnUpLeft;
            @UpLeft.performed -= instance.OnUpLeft;
            @UpLeft.canceled -= instance.OnUpLeft;
            @UpRight.started -= instance.OnUpRight;
            @UpRight.performed -= instance.OnUpRight;
            @UpRight.canceled -= instance.OnUpRight;
            @DownLeft.started -= instance.OnDownLeft;
            @DownLeft.performed -= instance.OnDownLeft;
            @DownLeft.canceled -= instance.OnDownLeft;
            @DownRight.started -= instance.OnDownRight;
            @DownRight.performed -= instance.OnDownRight;
            @DownRight.canceled -= instance.OnDownRight;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);
    public interface IPlayerMovementActions
    {
        void OnUpLeft(InputAction.CallbackContext context);
        void OnUpRight(InputAction.CallbackContext context);
        void OnDownLeft(InputAction.CallbackContext context);
        void OnDownRight(InputAction.CallbackContext context);
    }
}
